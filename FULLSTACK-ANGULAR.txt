# Anotações de Estudos: Desenvolvimento de Aplicações Fullstack com Angular, API ASP.NET Core, ADO.NET e SQL Server

## 1. Estrutura geral de uma aplicação Fullstack
* **Frontend:** Interface de usuário construída com Angular.
* **Backend:** API construída com ASP.NET Core.
* **Banco de Dados:** Armazenamento de informações usando SQL Server.
* **Comunicação:** O Angular faz requisições HTTP para a API (GET, POST, PUT, DELETE).

## 2. Banco de Dados (SQL Server)
* **Conceitos:**
    * Cada tabela representa uma entidade (ex: `Pessoas`).
    * Cada registro é uma linha da tabela.
    * O `ID` é uma chave primária (`PRIMARY KEY`) única para identificar registros.
    * Outros campos armazenam informações específicas (nome, idade, cpf, email).
* **Exemplo:**
    ```sql
    CREATE DATABASE Cadastro;

    CREATE TABLE Pessoas (
        Id INT PRIMARY KEY IDENTITY(1,1),
        Nome NVARCHAR(100) NOT NULL,
        Idade INT,
        Cpf NVARCHAR(11) UNIQUE NOT NULL,
        Email NVARCHAR(100)
    );
    ```
    * `IDENTITY(1,1)`: Faz o `Id` ser gerado automaticamente, começando em 1 e incrementando de 1 em 1.

## 3. API ASP.NET Core
* **Conceitos:**
    * **Controllers:** São "portas de entrada" da API, recebem requisições e devolvem respostas.
    * **Models:** Representam os dados que trafegam na aplicação.
    * **Rotas:** Caminhos de acesso à API (ex: `/pessoa/listarpessoas`).
    * **Métodos HTTP:**
        * `GET`: Buscar informações.
        * `POST`: Criar novos registros.
        * `PUT`: Atualizar registros existentes.
        * `DELETE`: Excluir registros.

* **Estrutura de um Controller básico:**
    ```csharp
    [ApiController]
    [Route("[controller]")]
    public class PessoaController : ControllerBase
    {
        [HttpGet("ListarPessoas")]
        public IEnumerable<Pessoa> ListarPessoas()
        {
            var lista = new List<Pessoa>
            {
                new Pessoa { Id = 1, Nome = "Lucas", Idade = 27, Cpf = "44003132053", Email = "lucas@email.com" },
                new Pessoa { Id = 2, Nome = "Mariana", Idade = 31, Cpf = "11223344556", Email = "mariana@email.com" }
            };

            return lista;
        }
    }
    ```
* **Importante:**
    * O nome das propriedades da Model devem estar em PascalCase (`Id`, `Nome`, etc.) para o JSON ficar mais "legível".
    * O Swagger gera automaticamente uma documentação da API para testes.

## 4. Frontend com Angular (conceitos iniciais)
* **Componentes:** Partes visuais (página de cadastro, tabela de pessoas).
* **Serviços:** Responsáveis por fazer requisições HTTP para a API.
* **Roteamento:** Gerenciar as telas da aplicação.
* **Formulários:** Reativos ou template-driven para capturar dados do usuário.
* **Fluxo básico de funcionamento:**
    1.  O usuário interage com o Angular.
    2.  O Angular chama um serviço que faz uma requisição para a API.
    3.  A API processa a requisição (lê/escreve no banco) e responde.
    4.  O Angular recebe a resposta e atualiza a tela.

## 5. ADO.NET (Acesso a dados na API)
* `SqlConnection`: Abre conexão com o banco.
* `SqlCommand`: Executa comandos SQL (`INSERT`, `SELECT`, etc.).
* `SqlDataReader`: Lê resultados de consultas.
* **Exemplo básico:**
    ```csharp
    using(SqlConnection conn = new SqlConnection("sua_connection_string"))
    {
        conn.Open();
        SqlCommand cmd = new SqlCommand("SELECT * FROM Pessoas", conn);
        SqlDataReader reader = cmd.ExecuteReader();
        while(reader.Read())
        {
            var nome = reader["Nome"].ToString();
            var idade = (int)reader["Idade"];
        }
    }
    ```

## 6. Pensamento de Desenvolvimento
1.  **Primeiro:** Pensar na estrutura do dado (modelagem simples).
2.  **Depois:** Pensar nos endpoints da API necessários (GET, POST, etc.).
3.  **Depois:** Pensar no frontend (como vai buscar e mostrar os dados).

## 7. Boas práticas iniciais
* Nomear tabelas no plural (`Pessoas`).
* Nomear propriedades no singular e em PascalCase (`Id`, `Nome`, etc.).
* Validar dados básicos (não permitir CPF repetido, etc.).
* Começar simples: CRUD completo para uma única tabela.

## [Próximos passos sugeridos]
* Criar o endpoint POST para cadastrar pessoa.
* Conectar a API ao banco usando ADO.NET.
* Criar uma página Angular para listar pessoas chamando a API.