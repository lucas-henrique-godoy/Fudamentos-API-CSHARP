#OBJETIVO GERAL: Aprender a criar aplica√ß√µes Fullstack com:
  - Angular(Frontend)
  - ASP.NET Core com ADO.NET(Backend)
  - SQL Server(Banco de dados)  
  - E entender o fluxo completo: do banco de dados at√© a tela,  e da tela at√© o banco de dados.
_________________________________________________________________________________________________________________________________________________________________________

#ETAPAS DA JORNADA (Vamos desbloquear aos poucos):
 1- Modelagem de banco de dados(come√ßamos por aqui)
 2- Criar banco e tabela no SQL Server
 3- Criar API ASP.NET Core com ADO.NET(sem Entity Framework)
 4- Criar Frontend Angular simples com formul√°rios reativos
 5- Fazer tudo se comunicar
 6- Aprender a debugar e resolver problemas
_______________________________________________________________________________________________________________________________________________________________________

üö∂‚Äç‚ôÇÔ∏è Etapa 1: Pensando como um Banco de Dados
Vamos imaginar que voc√™ tem um caderno e quer anotar informa√ß√µes de pessoas. O que voc√™ precisa guardar?

Desafio 1:
Sem pensar em c√≥digo ainda ‚Äî imagine que voc√™ vai montar uma tabela no papel com informa√ß√µes de uma pessoa.
O que voc√™ colocaria como colunas?

Exemplo: Nome, Idade, Email... e mais o qu√™?

üß† Pense e me diga quais colunas voc√™ colocaria.
(E tamb√©m me diga se alguma dessas colunas pode ser repetida, ou se precisa ser √∫nica ‚Äî tipo um CPF.)
 R: Eu colocaria:
- ID(√∫nico e n√£o pode repetir)
- Nome da pessoa
- Idade da pessoa
- CPF (Deve ser √∫nico e n√£o pode repetir)
- Email da pessoa

#MODELO DE DADOS DESSA TABELA:
---------------------------------------------------------------------------------------
Coluna   | Tipo de dado esperado       | Regras					      |
---------|-----------------------------|----------------------------------------------|
ID       | N√∫mero inteiro              | Chave prim√°ria, √∫nico, gerado autom√°tico     |   
Nome     | Texto (string)              | Pode repetir                                 |
Idade    | N√∫mero inteiro (ou opcional)| Pode repetir                                 |
CPF      | Texto (string, 11 d√≠gitos)  | Deve ser √∫nico  			      |
Email    | Texto                       | Pode ser √∫nico (depende da regra do sistema) |
---------------------------------------------------------------------------------------

_______________________________________________________________________________________________________________________________________________________________________

# Agora vem uma pergunta importante para voc√™ pensar:

ü§î Por que a gente usa um ID num√©rico autom√°tico em vez de usar o CPF como chave prim√°ria?
(Responda com sua l√≥gica ‚Äî sem medo de errar. Pode pensar alto mesmo.)

Depois que voc√™ responder isso, a gente j√° parte para criar essa tabela no SQL Server, via CREATE TABLE.
S√≥ que primeiro, quero te ajudar a pensar como o banco pensa üòâ

#RESPOSTA: üß† Conclus√£o (resposta para guardar):
 -A gente usa ID num√©rico como chave prim√°ria porque ele √© simples, r√°pido, leve, imut√°vel e ideal para ser refer√™ncia interna entre tabelas (relacionamentos).
 -O CPF √© uma informa√ß√£o √∫nica, sim, mas √© do mundo real, e deve ser validado ‚Äî n√£o usado como chave.
_______________________________________________________________________________________________________________________________________________________________________

üì¶ O que vem antes de CREATE TABLE?
Antes de criar qualquer tabela, voc√™ precisa criar um banco de dados onde essa tabela vai existir.

üß† Pense assim:
O banco de dados √© como um arquivo de Excel, e cada tabela √© uma aba dentro desse arquivo.

üî® Desafio 2: Criar o banco de dados
Tente escrever um comando SQL que cria um banco de dados chamado MeuSistema.

Voc√™ consegue imaginar como seria?

Dica: √© bem simples, algo assim:

COMANDO: CREATE DATABASE NomeDoBanco;

#MEU COMADO PARA CRIAR MEU BANCO: CREATE DATABASE Cadastro;


üß† Tente voc√™ escrever agora o comando para criar um banco com nome MeuSistema.
(E depois vamos para a cria√ß√£o da tabela PESSOAS dentro dele.)

_______________________________________________________________________________________________________________________________________________________________________
üß™ Desafio 3: Agora vamos criar essa tabela no SQL Server
Vamos pensar: quais tipos de dados voc√™ colocaria em cada coluna?

Por exemplo:

-ID: inteiro (INT)

-Nome: texto curto (VARCHAR)

-Idade: n√∫mero (INT)

-CPF: texto de 11 caracteres (VARCHAR(11))

-Email: texto (VARCHAR(100))

üß† Tente montar agora o comando CREATE TABLE PESSOAS com base nisso.

#MEU COMANDO PARA CRIAR A TABELA FOI ESSE:

CREATE TABLE Pessoas(
	PES_ID INT PRIMARY KEY IDENTITY(1,1),
	PES_NOME VARCHAR(100),
	PES_IDADE INT,
	PES_CPF VARCHAR(11) UNIQUE,
	PES_EMAIL VARCHAR(100)
);

üìå Explica√ß√µes r√°pidas:
IDENTITY(1,1) ‚Üí significa: comece no 1, e v√° somando de 1 em 1.

A ordem IDENTITY ‚Üí depois PRIMARY KEY √© s√≥ quest√£o de estilo. O SQL aceita das duas formas.

VARCHAR(100) ‚Üí voc√™ pode usar outro n√∫mero, mas evite deixar muito grande ou muito pequeno.
Por exemplo, VARCHAR(10) para nome talvez corte nomes como Fernanda ou Alessandro.
_______________________________________________________________________________________________________________________________________________________________________

