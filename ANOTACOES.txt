				*CURSO DE WEB API C# | ASP.NET CORE 7.0 

- DEFINI√á√ÉO: Uma interface que possui um conjunto de m√©todos que facilitam a vida do programador, podendo acessar esses m√©todos de uma forma simplificada. 
A API serve para abstrair todo o c√≥digo de sistemas complexos e legados, facilitando a vida do programador.

- COMO FUNCIONA UMA WEB API?: Dispositivos como celulares, notebooks, acessam a API por meio do protocolo HTTP, que √© utilizado para comunica√ß√£o com a mesma. A API por sua vez, vai at√© o banco de dados e faz a coleta das informa√ß√µes, e retorna em um formato que meu celular ou notebook compreendem, que √© o formato JSON.

- COMO FUNCIONA O HTTP?: O HTTP √© o protocolo que os navegadores utilizam para se comunicar com os servidores. Exemplo: quando acessamos um site, voc√™ j√° esta utilizando o protocolo HTTP em um servidor, e retorna uma p√°gina HTML. 

--EXEMPLO WEB API - GET:
 Um  navegador web,  e essa tela precisa carregador dados dos usu√°rio, ou seja precisa listar os dados do usu√°rio. Ent√£o a minha tela/front-end, vai no servidor e faz uma requisi√ß√£o: 

- CLIENTE --->   GET /api/usu√°rios ---> SERVIDOR   //Descri√ß√£o: Retorna a lista de usu√°rios cadastrados. EX: Endpoint ou URL- youtube/api/usu√°rios - Retorna todos os usu√°rios que tem no banco. O servidor por sua vez vai no banco de dados, coleta as informa√ß√µes e retorna em um formato  que ele entende(JSON),  e um c√≥digo de 200 OK (requisi√ß√£o ocorreu com sucesso).

--EXEMPLO WEB API - POST:
CLIENTE ---> POST api/usu√°rios ---> SERVIDOR  //Se a requisi√ß√£o for concluida com √™xito, o servidor retorna o c√≥digo 200.
             {
	 	"nome":"Felipe Brito",
	     } 


- FORMATO JSON: √â formato composto por chave e valor, onde o front-end consegue ler muito r√°pido.EXEMPLO:
{
    "id":1,
    "nome:"Galdino",
    "empresas": [
  {

    "nome_fantasia":"Youtube"
  },
  {
    "nome_fantasia":"AWS"
  },
 ]	
}


*M√©todo POST: Serve para adicionar dados --> api/usu√°rios      {
								  "nome":"Felipe Brito",      SERVIDOR
							       }



*M√©todo PUT: Seve para atualizar dados--> api/usu√°rios/7   {
							      "nome":"Felipe Brito Dev",     SERVIDOR
							   }




*M√©todo GET: Serve para obter dados de um servidor -->   api/usu√°rios/7 retorna apenas 1 usu√°rio que tem id 7	{        JSON
							      			         		          "nome":"Felipe Brito Dev",   <---  SERVIDOR
							   							}
	

*M√©todo DELETE: Serve para deletar dados.--> api/usu√°rios/7



--SOLICITA√á√ïES: Solicita√ß√µes HTTP. √â quando um dispositivo ou um navegador de internet, solicita ao servidor as informa√ß√µes.
PRINCIPAIS VERBOS:
GET:
POST:
PUT:
DELETE:
PATCH:



		üìå Tabela de resumo:
+--------+---------------------+----------------------------------------+
| M√©todo | Endpoint            | Descri√ß√£o                              |
+--------+---------------------+----------------------------------------+
| GET    | /api/usuarios       | Lista todos os usu√°rios                |
| POST   | /api/usuarios       | Cria um novo usu√°rio                   |
| GET    | /api/usuarios/1     | Retorna usu√°rio com ID = 1             |
| PUT    | /api/usuarios/1     | Atualiza usu√°rio com ID = 1            |
| DELETE | /api/usuarios/1     | Remove usu√°rio com ID = 1              |
+--------+---------------------+----------------------------------------+


	